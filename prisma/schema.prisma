// CONFIG //

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ENUMERATIONS //

enum Role {
  SUPER_USER
  ADMIN_USER
  BASIC_USER
}

// star rating
enum Rating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

// MODELS //

model Session {
  key        String   @id @default(uuid())
  user_id    Int      @unique
  expires_at DateTime
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id                  Int          @id @default(autoincrement())
  first_name          String
  last_name           String
  username            String       @unique
  email               String       @unique
  password            String
  profile_picture_uri String
  role                Role         @default(BASIC_USER)
  Submission          Submission[]
  outcome             Result[]
  session             Session[]
}

model Category {
  name        String     @id
  categoryKey Int        @unique
  questions   Question[]
  quizzes     Quiz[]
}

model Type {
  name      String     @id
  questions Question[]
  quizzes   Quiz[]
}

model Difficulty {
  name     String     @id
  score    Int?
  question Question[]
  quizzes  Quiz[]
}

model Answer {
  id          Int                  @id @default(autoincrement())
  text        String
  correct     Boolean
  question_id Int
  submissions QuestionSubmission[]
  question    Question             @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Question {
  id              Int        @id @default(autoincrement())
  question        String
  difficulty_type String
  category_type   String
  question_type   String
  quiz_id         Int
  answers         Answer[]
  quiz            Quiz       @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  difficulty      Difficulty @relation(fields: [difficulty_type], references: [name], onDelete: Cascade, onUpdate: Cascade)
  category        Category   @relation(fields: [category_type], references: [name], onDelete: Cascade, onUpdate: Cascade)
  type            Type       @relation(fields: [question_type], references: [name], onDelete: Cascade, onUpdate: Cascade)
}

model Quiz {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  start_date      DateTime     @default(now())
  end_date        DateTime
  difficulty_type String       @default("mixed")
  question_type   String       @default("mixed")
  category_type   String       @default("mixed")
  question_count  Int          @default(10)
  difficulty      Difficulty   @relation(fields: [difficulty_type], references: [name], onDelete: Cascade, onUpdate: Cascade) // difficulty of questions or mixed
  type            Type         @relation(fields: [question_type], references: [name], onDelete: Cascade, onUpdate: Cascade) // type of questions or mixed
  category        Category     @relation(fields: [category_type], references: [name], onDelete: Cascade, onUpdate: Cascade) // category of questions or mixed
  questions       Question[]
  submissions     Submission[]
}

model QuestionSubmission {
  id            Int        @id @default(autoincrement())
  answer_id     Int
  submission_id Int
  answer        Answer     @relation(fields: [answer_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  submission    Submission @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Result {
  id             Int    @id @default(autoincrement())
  quiz_id        Int    @unique
  winner_id      Int
  average_score  Float
  average_rating Rating
  winner         User   @relation(fields: [winner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Submission {
  id                   Int                  @id @default(autoincrement())
  user_id              Int
  quiz_id              Int
  score                Int                  @default(0)
  question_submissions QuestionSubmission[]
  rating               Rating
  quiz                 Quiz                 @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user                 User                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
